# Create a variable `summary_1_to_100` by passing a vector of the values one
# through one hundred to your `summarize_vector` function
summary_1_to_100 <- seq(1, 100)
print(summarize_vector(summary_1_to_100))
lintr:::addin_lint()
# A2 foundational skills
# Set up and Defining variables ------------------------------------------------
# Load the the `stringr` package
# (you'll need to install it if you haven't used it before)
# It has a variety of functions that make working with string variables easier
# install.packages("stringr")
# library("stringr")
# Create a numeric variable `my_age` that is equal to your age
my_age <- 19
# Create a variable `my_name` that is equal to your first name
my_name <- "Sierra"
# Using multiplication, create a variable `minutes_in_a_day` that is
# equal to the number of minutes in a day
minutes_in_a_day <- 60 * 24
print(minutes_in_a_day)
# Using multiplication, create a variable `hours_in_a_year` that is
# equal to the number of hours in a year
hours_in_a_year <- 24 * 365
print(hours_in_a_year)
# Create a variable `more_minutes_than_hours` that is boolean (TRUE/FALSE)
# It should be TRUE if there are more minutes/day than hours/year
# Otherwise it should be FALSE
minutes_in_a_day <- 1440
hours_in_a_year <- 8760
minutes_in_a_day < hours_in_a_year
# Working with functions -------------------------------------------------------
# Write a function `make_introduction()` that takes in two args (`name`, `age`)
# This function should return a string value that says:
# Hello, my name is {name}, and I'm {age} years old.
# The values {name} and {age} should take on the values passed into the function
# Make sure that proper spacing is used (e.g., you shouldn't have multiple
# spaces between words, and you should a space after a comma)
make_introduction <- function(name, age) {
result <- paste("Hello, my name is ", name, ", and I'm
", age, " years old", sep = "")
return(result)
}
function_call <- make_introduction("Sierra", "19")
print(function_call)
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
print(my_intro)
# Create a variable `casual_intro` by substituting "Hello, my name is",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- gsub("Hello, my name is", "Hey, I'm", my_intro)
print(casual_intro)
# Create a variable `loud_intro`, which is `my_intro` in all upper-case letters
# You should do this by using a function to convert your `my_intro` variable
# into all capital letters.
loud_intro <- toupper(my_intro)
print(loud_intro)
# Create a variable `quiet_intro`, which is `my_intro` in all lower-case letters
# You should do this by using a function to convert your `my_intro` variable
# into all lower-case letters.
quiet_intro <- tolower(my_intro)
print(quiet_intro)
# Create a new variable `capitalized_intro`, which is your `my_intro` variable,
# but with each word capitalized. hint: use the stringr function `str_to_title`
capitalized_intro <- str_to_title(my_intro)
print(capitalized_intro)
# Using the `str_count` function, create a variable `occurrences` that stores
# the # of times the letter "e" appears in `my_intro`
ocurrences <- str_count(my_intro,"e")
print(ocurrences)
# Write a function `double()` that takes in a value and
# returns that value times two
double <- function(input) { #input is arbitrary
values <- input * 2
return(values)
}
call_values <- double(4)
print(call_values)
# Using your `double()` function, create a variable `minutes_in_two_days`,
# which is the number of minutes in two days
minutes_in_a_day <- 60 * 24
minutes_in_two_days <- double(minutes_in_a_day)
print(minutes_in_two_days)
# Write a function `cube()` that takes in a value and returns that value cubed
cube <- function(input) {
values <- (input * input * input)
return(values)
}
cube <- call_cube <- cube(2)
print(call_cube)
# Create a variable `twenty_seven` by passing 3 to your `cube()` function
twenty_seven <- cube(3)
print(twenty_seven)
# Create a function `inches_to_cm` that converts from inches to centimeters
inches_to_cm <- function(inches) {
cm <- inches * 2.54
return(cm)
}
call_function <- inches_to_cm(67)
print(call_function)
# Create a variable `inches_tall` that is your (numeric) height in inches
inches_tall <- 67
print(inches_tall)
# Using your `inches_to_cm` function and your `inches_tall` variable,
# create a variable `cm_tall` that is your height in centimeters
cm_tall <- inches_to_cm(inches_tall)
print(cm_tall)
# Write a function `has_more_zs` to determine which of two strings contains
# more instances of the letter "z". It should take as parameters two string
# variables, and return the argument which has more occurances of the letter "z"
# If neither phrase contains the letter "z", it should return:
# "Neither string contains the letter z."
# If the phrases contain the same number of "z"s, it should return:
# "The strings have the same number of Zs."
# The function must work for both capital and lowercase "z"s.
has_more_zs <- function(value1, value2) {
lower_val1 <- tolower(value1)
lower_val2 <- tolower(value2)
if (str_count(lower_val1, "z") > str_count(lower_val2, "z"))
{
paste(value1)
}
else if (str_count(lower_val1, "z") == 0 & str_count(lower_val2, "z") == 0)
{
paste("Neither string contains the letter z")
}
else if (str_count(lower_val1, "z") == str_count(lower_val2, "z"))
{
paste("The strings contain the same numbers of Zs")
}
else
{
paste(value2)
}
print(has_more_zs("z", "zz"))
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
ztest <- has_more_zs("zz", "Zzz")
print(ztest)
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(val1) {
gsub(pattern = "[0-9]+", "", val1)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("test1", "test123"))
# Vectors ----------------------------------------------------------------------
# Create a vector `movies` that contains the names of six movies you like
movies <- c("Tangled", "She's the Man", "Harry Potter", "Halloweentown",
"Passengers", "End Game")
print(movies)
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- c(1, 2, 3)
top_three <- movies[1:3]
print(top_three)
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
excited <- paste(movies, "is a great movie!")
print(excited)
# Create a vector `without_four` by omitting the fourth element from `movies`
# You should do this using a _negative index_
without_four <- movies[-4]
print(without_four)
# Create a vector `multiples_of_4` that is every number divisible by 4
# between 4 and 400 (**2 points**)
multiples_of_four <- seq(4, 400, 4)
print(multiples_of_four)
# Create a vector `multiples_of_8` by filtering your `multiples_of_4` variable
# down to only elements that are divisible by 8.
multiples_of_eight <- multiples_of_four[c(FALSE, TRUE)]
print(multiples_of_eight)
# credit to: stackoverflow by Sven Hohenstein
# Create a vector `numbers` that is the numbers 700 through 999
numbers <- seq(700, 999)
print(numbers)
# Using the built in `length()` function, create a variable `numbers_len`
# that is equal to the length of your vector `numbers`
numbers_len <- length(numbers)
print(numbers_len)
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of your vector `numbers`
numbers_mean <- mean(numbers)
print(numbers_mean)
# Using the `median()` function, create a variable `numbers_median`
# that is the median of your vector `numbers`
numbers_median <- median(numbers)
print(numbers_median)
# Create a vector `lower_numbers` that the values in your `numbers` vector
# that are lower than `numbers_mean` (you should do this using vector filtering)
low_numbers <- numbers < numbers_mean
lower_numbers <- numbers[low_numbers]
print(lower_numbers)
# Create a vector `higher_numbers` that the values in your `numbers` vector
# that are higher than `numbers_mean` (again, using vector filtering)
high_numbers <- numbers > numbers_mean
higher_numbers <- numbers[high_numbers]
print(higher_numbers)
# Lists ------------------------------------------------------------------------
# Create a list called `summary_info` in which you'll store summary information
# about the `numbers` vector above. The list should have the following keys:
# - `length`: in which you'll store the length of the vector
# - `mean`: in which you'll store the mean of the vector
# - `median`: in which you'll store the median of the vector
summary_info <- list(
length = 300,
mean = 849.5,
median = 849.5
)
print(summary_info)
# Now, write a function called `summarize_vector` that takes in a vector of
# numbers, and returns a list of summary information about that vector
# (including the mean, median, and length)
summarize_vector <- function(numbers) {
list_of_vector <- list(
length(number_vector),
mean(number_vector),
median(number_vector)
)
return(list_of_vector)
}
# Create a variable `summary_1_to_100` by passing a vector of the values one
# through one hundred to your `summarize_vector` function
summary_1_to_100 <- seq(1, 100)
print(summarize_vector(summary_1_to_100))
lintr:::addin_lint()
has_more_zs <- function(value1, value2) {
lower_val1 <- tolower(value1)
lower_val2 <- tolower(value2)
if (str_count(lower_val1, "z") > str_count(lower_val2, "z"))
}
{
paste(value1)
}
else if (str_count(lower_val1, "z") == 0 & str_count(lower_val2, "z") == 0)
{
paste("Neither string contains the letter z")
}
else if (str_count(lower_val1, "z") == str_count(lower_val2, "z"))
{
paste("The strings contain the same numbers of Zs")
}
else
{
paste(value2)
}
print(has_more_zs("z", "zz"))
has_more_zs <- function(value1, value2) {
lower_val1 <- tolower(value1)
lower_val2 <- tolower(value2)
if (str_count(lower_val1, "z") > str_count(lower_val2, "z"))
paste(value1)
}
else if (str_count(lower_val1, "z") == 0 & str_count(lower_val2, "z") == 0)
{
paste("Neither string contains the letter z")
}
else if (str_count(lower_val1, "z") == str_count(lower_val2, "z"))
{
paste("The strings contain the same numbers of Zs")
}
else
{
paste(value2)
}
print(has_more_zs("z", "zz"))
has_more_zs <- function(value1, value2) {
lower_val1 <- tolower(value1)
lower_val2 <- tolower(value2)
if (str_count(lower_val1, "z") > str_count(lower_val2, "z"))
}
{
paste(value1)
}
else if (str_count(lower_val1, "z") == 0 & str_count(lower_val2, "z") == 0)
{
paste("Neither string contains the letter z")
}
else if (str_count(lower_val1, "z") == str_count(lower_val2, "z"))
{
paste("The strings contain the same numbers of Zs")
}
else
{
paste(value2)
}
print(has_more_zs("z", "zz"))
has_more_zs <- function(value1, value2) {
lower_val1 <- tolower(value1)
lower_val2 <- tolower(value2)
if (str_count(lower_val1, "z") > str_count(lower_val2, "z"))
}
{
paste(value1)
}
else if (str_count(lower_val1, "z") == 0 & str_count(lower_val2, "z") == 0)
{
paste("Neither string contains the letter z")
}
else if (str_count(lower_val1, "z") == str_count(lower_val2, "z"))
{
paste("The strings contain the same numbers of Zs")
}
else
{
paste(value2)
}
print(has_more_zs("z", "zz"))
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
ztest <- has_more_zs("zz", "Zzz")
print(ztest)
print(has_more_zs("z", "zz"))
lintr:::addin_lint()
print(has_more_zs("z", "zz"))
has_more_zs <- function(value1, value2) {
lower_val1 <- tolower(value1)
lower_val2 <- tolower(value2)
if (str_count(lower_val1, "z") > str_count(lower_val2, "z"))
}
{
paste(value1)
}
else if (str_count(lower_val1, "z") == 0 & str_count(lower_val2, "z") == 0)
{
paste("Neither string contains the letter z")
}
else if (str_count(lower_val1, "z") == str_count(lower_val2, "z"))
{
paste("The strings contain the same numbers of Zs")
}
else
{
paste(value2)
}
print(has_more_zs("z", "zz"))
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
ztest <- has_more_zs("zz", "Zzz")
print(ztest)
has_more_zs <- function(value1, value2) {
lower_val1 <- tolower(value1)
lower_val2 <- tolower(value2)
if (str_count(lower_val1, "z") > str_count(lower_val2, "z"))
{
paste(value1)
}
else if (str_count(lower_val1, "z") == 0 & str_count(lower_val2, "z") == 0)
{
paste("Neither string contains the letter z")
}
else if (str_count(lower_val1, "z") == str_count(lower_val2, "z"))
{
paste("The strings contain the same numbers of Zs")
}
else
{
paste(value2)
}
}
print(has_more_zs("z", "zz"))
lintr:::addin_lint()
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes <- vehicles[, 2]
?unique
acuras <- filter(vehicles, make == "acura", year == 2015)
bestacura <- filter(acuras, hwy == max(hwy))
best_model <- select(bestacura, model)
acuras <- filter(vehicles, make == "acura", year == 2015)
acuras <- filter(vehicles, year == 2015)
acuras <- filter(vehicles, make == "acura", year == 2015)
acuras <- filter(vehicles, make == "acura", year == 2015)
best_acura <- filter(acuras, hwy == max(hwy))
best_model <- select(best_acura,)
isntall.packages("dpylr")
library("dplyr")
acuras <- filter(vehicles, make == "acura", year == 2015)
best_acura <- filter(acuras, hwy == max(hwy))
best_model <- select(best_acura,)
best_model <- select(
filter(
filter(vehicles, make == "Acura", year == 2015), hwy == max(hwy)
), model
)
install.packages("nycflights13")
library("nycflights13")
# install.packages("nycflights13")
# library("nycflights13")
View(nycflights13)
# install.packages("nycflights13")
# library("nycflights13")
View("nycflights13")
# install.packages("nycflights13")
# library("nycflights13")
View(nycflights13)
install.packages("nycflights13")
library("nycflights13")
install.packages("nycflights13")
View(nycflights13)
View("nycflights13")
install.packages("shiny")
library("shiny")
?shiny
shiny::runApp('Desktop/INFO201/ClassDemo')
energy_csv <- read.csv("AEP_hourly.csv")
setwd("~/Desktop/INFO201/201-Extra-Credit")
library("shiny")
energy_csv <- read.csv("AEP_hourly.csv")
View(energy_csv)
library("ggplot2")
library("dplyr")
year <- format(as.POSIXct(strptime(energy_consumption_df$Datetime,
"%m/%d/%y %H:%M",tz="")), format = "%y")
#turning dataset into useable format
energy_consumption_df <- read.csv("AEP_hourly.csv", stringsAsFactors = FALSE)
#separating "Datetime" column into date and time
time <- format(as.POSIXct(strptime(energy_consumption_df$Datetime,
"%m/%d/%y %H:%M",tz="")), format = "%H:%M")
date <- format(as.POSIXct(strptime(energy_consumption_df$Datetime,
"%m/%d/%y %H:%M",tz="")), format = "%m/%d/%y")
year <- format(as.POSIXct(strptime(energy_consumption_df$Datetime,
"%m/%d/%y %H:%M",tz="")), format = "%y")
separated_df <- cbind(time, energy_consumption_df)
energy_df <- cbind(date, year, separated_df)
View(energy_df)
test <- energy_df %>%
select(AEP_MW, year) %>%
group_by(year) %>%
summarize(average = mean(AEP_MW)) %>%
pull(year, AEP_MW)
library("ggplot2")
library("dplyr")
library("leaflet")
library("plotly")
test <- energy_df %>%
select(AEP_MW, year) %>%
group_by(year) %>%
summarize(average = mean(AEP_MW)) %>%
pull(year, AEP_MW)
test <- energy_df %>%
select(AEP_MW, year) %>%
group_by(year) %>%
summarize(mean = mean(AEP_MW)) %>%
pull(year, AEP_MW)
by_year <- energy_df %>%
select(AEP_MW, year) %>%
group_by(year) %>%
summarize(mean = mean(AEP_MW)) %>%
pull(year, AEP_MW)
by_year <- energy_df %>%
select(AEP_MW, year) %>%
group_by(year) %>%
summarize(mean = mean(AEP_MW)) %>%
pull(year, mean)
ggplot(data = energy_df) +
geom_point(mapping = aes(year, AEP_MW)) +
labs(title = "Energy Use",
x = "Date",
y = "Megawatts")
ggplot(data = energy_df) +
geom_col(mapping = aes(year, AEP_MW)) +
labs(title = "Energy Use",
x = "Date",
y = "Megawatts")
scatterplot1 <- ggplot(data = energy_df) +
geom_col(mapping = aes(x = date, y = AEP_MW)) +
labs(title = "Energy Use",
x = "Date",
y = "Mega Watts")
scatterplot1 <- ggplot(data = energy_df) +
geom_col(mapping = aes(x = year, y = AEP_MW)) +
labs(title = "Energy Use",
x = "Year",
y = "Mega Watts")
scatterplot1 <- ggplot(data = energy_df) +
geom_col(mapping = aes(x = year, y = AEP_MW)) +
labs(title = "Energy Use",
x = "Year",
y = "Mega Watts")
barplot1 <- ggplot(data = energy_df) +
geom_col(mapping = aes(x = year, y = AEP_MW)) +
labs(title = "Energy Use",
x = "Year",
y = "Mega Watts")
ggplot(data = energy_df) +
geom_col(mapping = aes(year, AEP_MW)) +
labs(title = "Energy Use",
x = "Year",
y = "Megawatts")
source("analysis.R")
source("analysis.R")
most_energy <- energy_df %>%
filter(AEP_MW == mean(AEP_MW)) %>%
select(date)
barplot1 <- ggplot(data = energy_df) +
geom_col(mapping = aes(year, AEP_MW)) +
labs(title = "Energy Use",
x = "Year",
y = "Megawatts")
